Объяснение важности условных конструкций:

В программировании часто требуется принимать решения.
Условные конструкции позволяют программе выполнять разные действия в зависимости от входных данных.
Примеры из жизни:
Если идет дождь, берем зонт.
Если температура выше 30°C, включаем кондиционер.
Примеры на псевдокоде:

Если (на улице дождь)  
    Взять зонт  
Иначе  
    Выйти без зонта  

2. Синтаксис условных операторов в Python 
Оператор if

age = 18
if age >= 18:
    print("Вы совершеннолетний")
Условие должно возвращать True или False.
Код после if выполняется только если условие истинно.
Оператор if-else


age = 16
if age >= 18:
    print("Вы совершеннолетний")
else:
    print("Вы несовершеннолетний")
Блок else выполняется, если условие if ложно.
Оператор if-elif-else


score = 85
if score >= 90:
    print("Отлично")
elif score >= 70:
    print("Хорошо")
else:
    print("Нужно постараться")
elif добавляет дополнительные условия.
Код проверяет условия сверху вниз.
Правильное форматирование (отступы)

Важно использовать одинаковые отступы (4 пробела).

4. Вложенные условия 
age = 20
has_license = True

if age >= 18:
    if has_license:
        print("Вы можете водить машину")
    else:
        print("Получите водительские права")
else:
    print("Вы слишком молоды для вождения")

Вложенные условия помогают уточнять проверки.
Лучше избегать глубокой вложенности.


5. Логические операторы в условиях
Объяснение операторов and, or, not:

age = 25
income = 40000

if age <= 18 and income > 30000:
    print("Вы можете взять кредит")
and – оба условия должны быть истинными.
or – хотя бы одно условие должно быть истинным.
not – инвертирует значение условия.

6. Тернарный оператор
Объяснение краткой записи условий:

age = 20
message = "Совершеннолетний" if age >= 18 else "Несовершеннолетний"
print(message)
