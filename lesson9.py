# Урок 9: Кортежи и множества — основные операции

# 1. **Что такое кортеж (tuple)**:
#    - Кортеж — это неизменяемая структура данных, аналог списка, но с фиксированным размером.
#    - Неизменяемость означает, что после создания кортеж нельзя изменить (добавить, удалить или изменить элементы).
#    - Объявление кортежей:

my_tuple = (1, 2, 3)
single_element_tuple = (5,)  # Обратите внимание на запятую — так создается кортеж из одного элемента

# - Доступ по индексу:
print(my_tuple[0])  # Вывод: 1

# - Вложенные кортежи (кортежи внутри кортежей):
nested_tuple = (1, (2, 3), (4, 5))
print(nested_tuple[1][0])  # Вывод: 2

# - Преобразование списка в кортеж и наоборот:
list_to_tuple = tuple([1, 2, 3])
tuple_to_list = list((1, 2, 3))

# - Преимущества кортежей перед списками:
# - Быстрее обрабатываются, так как неизменяемы.
# - Могут использоваться как ключи в словарях (в отличие от списков).

# 2. **Основные методы кортежей**:
#    - `count(value)` — количество вхождений значения:
my_tuple = (1, 2, 2, 3, 2)
print(my_tuple.count(2))  # Вывод: 3

# - `index(value)` — индекс первого вхождения значения:
print(my_tuple.index(2))  # Вывод: 1


# 3. **Что такое множество (set)**:
#    - Множество — это неупорядоченная коллекция уникальных элементов.
#    - Не допускает дубликатов и изменяемо (можно добавлять и удалять элементы).
#    - Создание множества:

my_set = {1, 2, 3}
# my_set_from_list = set([1, 2, 3, 2])
# print(my_set_from_list)  # Вывод: {1, 2, 3}

# - Преобразование списка или строки в множество:
set_from_string = set('hello')
print(set_from_string)  # Вывод: {'h', 'e', 'l', 'o'}

# 4. **Основные методы множеств**:
#    - `add(value)` — добавление элемента:
my_set.add(4)
print(my_set)  # {1, 2, 3, 4}

# - `remove(value)` — удаление элемента (ошибка, если не найден):
my_set.remove(2)

# - `discard(value)` — удаление элемента (без ошибки, если не найден):
my_set.discard(10)  # Ошибки не будет, даже если 10 нет в множестве

# - `pop()` — удаление случайного элемента:
removed = my_set.pop()
print(removed)  # Удалит и вернет случайный элемент

# - `clear()` — очистка множества:
my_set.clear()
print(my_set)  # Пустое множество: set()

# - `union()`, `intersection()`, `difference()`, `symmetric_difference()`:
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(set1.union(set2))             # {1, 2, 3, 4, 5}
print(set1.intersection(set2))      # {3}
print(set1.difference(set2))        # {1, 2}
print(set1.symmetric_difference(set2))  # {1, 2, 4, 5}

# 5. **Операции над множествами**:
#    - Проверка принадлежности:
print(2 in set1)       # True
print(5 not in set1)   # True

# - Подмножество и надмножество:
subset = {1, 2}
superset = {1, 2, 3, 4}
print(subset < superset)   # True — subset является подмножеством superset
print(superset > subset)   # True — superset является надмножеством subset
print(subset <= superset)  # True — неполное или полное подмножество
print(superset >= subset)  # True — неполное или полное надмножество

# Кортежи — это неизменяемые и быстрые структуры данных, которые используются там, где важна постоянность данных.
# Множества позволяют эффективно работать с уникальными элементами, проверять принадлежность и выполнять операции
# пересечения и объединения.
# Используйте кортежи для неизменяемых последовательностей, а множества — для уникальных коллекций элементов.


# Ознакомительные задачи:

# 1. Создай кортеж из трёх чисел и выведи сумму всех элементов.

tup = (32, 45, 62)
print(sum(tup))


# 2. Напиши программу, которая проверяет, есть ли определённое значение в кортеже.

print(33 in tup)

# 3. Создай кортеж из строк и объедини их в одну строку через пробел.

strings = ("apple", "pear", "cherry", "mango")
print("  ".join(strings))

# 4. Создай кортеж с числами и найди максимальное и минимальное значение.

nums = (124, 54, 243, 443)
print(max(nums))
print(min(nums))

# 5. Преобразуй список ['apple', 'banana', 'cherry'] в кортеж.

fruits = ['apple', 'banana', 'cherry']
print(tuple(fruits))

# 6. Напиши программу, которая принимает список чисел и возвращает кортеж только из уникальных значений.

num_list = [1, 3, 5, 3, 3, 3, 5, 1,]
print(set(num_list))

# 7. Создай множество с числами от 1 до 5 и добавь к нему число 6.

setik = {1, 2, 3, 4, 5}
setik.add(6)
print(setik)

# 8. Удали элемент "banana" из множества {'apple', 'banana', 'cherry'}.

fruit = {'apple', 'banana', 'cherry'}
fruit.remove('banana')
print(fruit)


# 9. Найди пересечение множеств {1, 2, 3} и {2, 3, 4}.

a = {1, 2, 3}
b = {2, 3, 4}
print(a.intersection(b))

# 10. Определи, является ли множество {1, 2} подмножеством множества {1, 2, 3, 4}.
x = {1, 2}
y = {1, 2, 3, 4}
print(x <= y)

# Домашнее задание (40 задач):

# 1. Создай кортеж из трёх случайных строк и проверь, содержится ли в нём строка "Python".

codes = ("Java", "JavaScript", "Djumandji")
print("Python" in codes)


# 2. Преобразуй строку "hello world" в кортеж символов.

h = "hello world"
print(tuple(h))

# 3. Даны два кортежа: (1, 2, 3) и (4, 5, 6). Объедини их в один.
first = (1, 2, 3)
second = (4, 5, 6)
print(first + second)


# 4. Создай кортеж чисел и посчитай количество вхождений числа 5.
nums = (3, 5, 7, 6, 5, 2, 5, 7, 5)
print(nums.count(5))

# 5. Даны два кортежа. Проверь, совпадает ли первый элемент первого кортежа с последним элементом второго.
tuple1 = (34, 56, 78)
tuple2 = (45, 43, 23)
print(tuple1[0] == tuple2[2])

# 6. Напиши программу, которая меняет местами первый и последний элемент кортежа.
tuplik = (1, 2, 3, 4, 5, 6, 7)
kuplit = (tuplik[-1],) + (tuplik[1:-1]) + (tuplik[0],)
print(kuplit)

# 7. Создай пустое множество и добавь в него три уникальных числа.

emset = set()
emset.add(1)
emset.add(12)
emset.add(123)
print(emset)

# 8. Удали произвольный элемент из множества {10, 20, 30, 40}.
random = {10, 20, 30, 40}
print(random.pop())
print(random)

# 9. Создай множество из строки "abracadabra" и выведи уникальные символы.
abracadabra = "abracadabra"
print(tuple("abracadabra"))
print(set(tuple("abracadabra")))

# 10. Объедини множества {1, 2, 3} и {3, 4, 5}.
q = {1, 2, 3}
w = {3, 4, 5}
print(q.union(w))

# 11. Проверь, являются ли множества {1, 2, 3} и {3, 2, 1} равными.
e = {1, 2, 3}
r = {3, 2, 1}
print({1, 2, 3} == {3, 2, 1})


# 12. Создай множество с числами от 1 до 10 и удали все чётные числа.

oneten = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
oneten -= {2, 4, 6, 8, 10}
print(oneten)

# 13. Напиши программу, которая проверяет, есть ли пересечение у множеств {1, 2, 3} и {4, 5, 6}.

t = {1, 2, 3}
y = {4, 5, 6}
print(True if t.intersection(y) else False)


# 14. Дан кортеж чисел. Выведи все элементы, кроме первого и последнего.

k = (23, 45, 234, 454, 221, 34, 42, 78, 98, 945)
print(k[1:-1])

# 15. Проверь, может ли кортеж (1, 2, 3) быть ключом словаря.
dict = {(1, 2, 3) : "can be key"}
print(dict[(1, 2, 3)])

# 16. Создай кортеж и преобразуй его в строку через запятую.
f = ("i", "wanna", "sleep", "so", "much")
print(str(",".join(f)))

# 17. Найди количество уникальных символов в строке "datascience" с использованием множества.

datascience = "datascience"
setdata = set(datascience)
print(len(setdata))

# 18. Создай множество из списка чисел [1, 2, 2, 3, 4, 4, 5] и выведи его длину.

one5 = [1, 2, 2, 3, 4, 4, 5]
set5 = set(one5)
print(len(set5))

# 19. Напиши программу, которая возвращает разность множеств {1, 2, 3} и {2, 3, 4}.

d = {1, 2, 3}
dd = {2, 3, 4}
print(d.symmetric_difference(dd))

# 20. Дан кортеж чисел. Найди сумму всех элементов, не используя встроенную функцию sum().
kort = (34, 6, 25)
print(int(kort[0] + kort[1] + kort[2]))

# 21. Создай множество из чисел от 1 до 5 и проверь, является ли число 3 элементом множества.

s5 = {1, 2, 3, 4, 5}
print(3 in s5)

# 22. Найди длину кортежа (10, 20, 30, 40).

f = (10, 20, 30, 40)
print(len(f))

# 23. Создай кортеж, содержащий 5 одинаковых элементов.

five = ("ha",) * 5
print(five)

# 24. Дан кортеж с числами. Найди индекс первого отрицательного числа.

g = (23, 34, 54, -4, -2, -43)
print(g.index(-4))

# 25. Напиши программу, которая проверяет, можно ли преобразовать множество {1, 2, 3} в неизменяемое множество (frozenset).

p = {1, 2, 3}
print(frozenset(p))

# 26. Проверь, является ли множество {1, 2} подмножеством {1, 2, 3, 4}.
l = {1, 2}
ll = {1, 2, 3, 4}
print(l < ll)

# 27. Напиши программу, которая возвращает симметрическую разность множеств {1, 2, 3} и {3, 4, 5}.
m = {1, 2, 3}
mm = {3, 4, 5}
print(m.symmetric_difference(mm))

# 28. Создай кортеж и найди индекс первого вхождения числа 7.

v = (5, 6, 7, 4, 7, 8)
print(v.index(7))

# 29. Напиши программу, которая создаёт множество из всех символов строки "python" и удаляет из него символ 'h'.
# 29. Напиши программу, которая создаёт множество из всех символов строки "python" и удаляет из него символ 'h'.

python = "python"
setp = set(python)
setp.remove('h')
print(setp)

# 30. Проверь, является ли множество {1, 2, 3} надмножеством {2, 3}{2, 3}.

gg = {1, 2, 3}
g = {2, 3}
print(gg > g)

# 31. Создай кортеж и попытайся изменить его элемент (ожидай ошибку).

# k = (3, 8, 9)
# k[1] = 9
# print(k)

# 32. Напиши программу, которая находит общие элементы в кортежах (1, 2, 3) и (2, 3, 4).
c = (1, 2, 3)
cc = (2, 3, 4)
print(set(c).intersection(set(cc)))

# 33. Создай множество из чисел и удали из него минимальное значение.

u = {56, 89, 23, 16, 54}
u.discard(min(u))
print(u)

# 34. Преобразуй кортеж (1, 2, 3) в список и добавь к нему число 4.
a = (1, 2, 3)
a = set(a)
print(a)
a.add(4)
print(a)

# 35. Создай кортеж из случайных чисел и отсортируй его (без изменения оригинала).
j = (23, 54, 76, 23, 57, 21)
js = tuple(sorted(j))
print(js)

# 36. Напиши программу, которая проверяет, есть ли пересечение у множеств {1, 2, 3} и {4, 5, 6}.
i = {1, 2, 3}
ii = {4, 5, 6}
print(True if i.intersection(ii) else False)

# 37. Создай кортеж из строк и найди самую длинную строку.

sk = ("jupiter", "mars", "venus", "uran", "andromeda")
print(max(sk, key=len))

# 38. Преобразуй кортеж в множество и найди его длину.

sk = set(sk)
print(len(sk))

# 39. Найди минимальный элемент множества {10, 20, 5, 30}.
mini = {10, 20, 5, 30}
print(min(mini))

# 40. Создай множество и добавь в него все буквы строки "data" и "science" без повторений.

ds = set()
ds = set("data" + "science")
print(ds)
