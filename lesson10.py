import random
import datetime

#
# # Легкие:
# 1. Создайте переменную `age` и присвойте ей ваш возраст. Выведите ее.
# ### Переменные, типы данных и базовые операции ###

age = 23
print(age)

# 2. Перемножьте два числа `5` и `7`, результат сохраните в переменную `result`.
result = 5 * 7
print(result)

# 3. Преобразуйте число `10` в строку и выведите его тип.
ten = 10
ten = str(ten)
print(type(ten))

# 4. Сложите строки `"Hello"` и `"World"` с пробелом между ними.
hello = "Hello"
world = "World"
print(hello + " " + world)


# 5. Проверьте, является ли `100` больше `99` (выведите `True` или `False`).

print(100 > 99)

#
# # Средние:
# 6. Даны две переменные: `a = 10`, `b = 3`. Найдите результат деления `a` на `b` с остатком.
a = 10
b = 3
print(a / 3)


# 7. Пользователь вводит два числа. Выведите их сумму.
# f = input("First number: ")
# s = input("Second number: ")
# print(int(f) + int(s))

# 8. Преобразуйте строку `"123"` в число и умножьте на `2`.
hh = "123"
print(int(123) * 2)

# 9. Сравните строки `"apple"` и `"Apple"` (равны ли они?).
m = "apple"
l = "Apple"
print("apple" == "Apple")

# 10. Дано число `15.8`. Округлите его до целого.
n = 15.8
print(round(15.8))

#
# # Сложные:
# 11. Напишите код, который меняет значения двух переменных местами.
t = "hi"
tt = "hello"
t, tt = tt, t
print(t, tt)

# 12. Вычислите среднее арифметическое трех чисел.
print(int((1 + 2 + 3)/ 3))

# 13. Проверьте, является ли строка `"12345"` числом (используйте методы строк).
v = "12345"
print(True if v.isdigit else False)

# 14. Дано число `1001`. Проверьте, является ли оно палиндромом (читается одинаково слева направо).
p = "1001"
print((p[0] == p[3] and p[1] == p[2]))

# 15. Сгенерируйте случайное число от `1` до `100` (используйте модуль `random`).
# random


#
# ### Ввод и вывод данных ###
#
# # Легкие:
# 16. Пользователь вводит имя. Выведите `"Привет, [имя]!"`.
# nam = input("Enter name: ")
# print("Hello, ", nam)


# 17. Запросите у пользователя возраст и выведите его через 5 лет.
ag = 23
print(ag + 5)

# 18. Напишите программу, которая спрашивает любимый цвет и выводит его в верхнем регистре.
# col = input("fav color: ")
# print(col.upper())


# 19. Запросите два числа и выведите их произведение.
# k = input("first: ")
# kk = input("sec: ")
# print(int(k) * int(kk))


# 20. Выведите текущую дату (используйте модуль `datetime`).
print(datetime.datetime.now())

#
# # Средние:
# 21. Пользователь вводит строку. Выведите ее длину.
# h = input("type anything: ")
# print(len(h))

# 22. Запросите число и проверьте, четное ли оно.
# n1 = input("Enter number: ")
# print(True if int(n1) % 2 == 0 else False)

# 23. Напишите программу-калькулятор для двух чисел (+, -, *, /).
# z = input("n1: ")
# op = input("+, -, *, /: ")
# zz = input("n2: ")
# if op == "+":
#     print(int(z) + int(zz))
# elif op == "-":
#     print(int(z) - int(zz))
# elif op == "/":
#     print(int(z) / int(zz))
# elif op == "*":
#     print(int(z) * int(zz))


# 24. Пользователь вводит предложение. Разбейте его на слова (список).
# se = input("Enter sentence: ")
# print(se.split(" "))

# 25. Преобразуйте введенную строку в обратном регистре (большие → маленькие и наоборот).

# sf = input("Enter sentence: ")
# print(sf.swapcase())

#
# # Сложные:
# 26. Запросите пароль. Если длина меньше 8 символов, выведите ошибку.
# pas = input("Enter password: ")
# print(False if len(pas) < 8 else True)

# 27. Напишите программу, которая проверяет, является ли введенная строка палиндромом.
# pl = input("Enter word: ")
# print(pl[0:] == pl[::-1])

# 28. Конвертируйте введенное количество градусов Цельсия в Фаренгейты.
# °F=(°C×1.8)+32
# c = input("Enter temp in C: ")
# print((int(c) * 1.8) + 32)

# 29. Запросите число и выведите его квадрат, куб и квадратный корень.
# nu = input("Enter number: ")
# print(int(nu) ** 2)
# print(int(nu) ** 3)
# print(int(nu) ** 0.5)


# 30. Создайте программу, которая генерирует случайный пароль (из букв и цифр).

#
# ### Списки ###
#
# # Легкие:
# 31. Создайте список чисел от `1` до `5` и выведите его.
of = [1, 2, 3, 4, 5]
print(of)

# 32. Добавьте число `6` в конец списка.
of.append(6)
print(of)

# 33. Выведите второй элемент списка `["яблоко", "банан", "вишня"]`.
fruit = ["яблоко", "банан", "вишня"]
print(fruit[1])

# 34. Удалите первый элемент списка `[10, 20, 30, 40]`.
na = [10, 20, 30, 40]
na.remove(na[0])
print(na)

# 35. Проверьте, есть ли `"кофе"` в списке `["чай", "вода", "сок"]`.
dr = ["чай", "вода", "сок"]
print("кофе" in dr)

#
# # Средние:
# 36. Дан список `[3, 1, 4, 2]`. Отсортируйте его.
sp = [3, 1, 4, 2]
print(sorted(sp))

# 37. Объедините два списка `[1, 2]` и `[3, 4]`
l = [1, 2]
ll = [3, 4]
print(l + ll)

# 38. Найдите сумму элементов списка `[5, 10, 15, 20]`.
g = [5, 10, 15, 20]
print(sum(g))

# 39. Удалите дубликаты из списка `[1, 2, 2, 3, 4, 4]`.
k = [1, 2, 2, 3, 4, 4]
print(set(k))

# 40. Разверните список `[1, 2, 3, 4]` в обратном порядке.
r = [1, 2, 3, 4]
r.reverse()
print(r)

#
# # Сложные:
# 41. Найдите наибольший и наименьший элементы в списке.
print(min(r))
print(max(r))

# 42. Отфильтруйте только четные числа из списка `[1, 2, 3, 4, 5, 6]`.
v = [1, 2, 3, 4, 5, 6]
print(v[1::2])

# 43. Создайте список квадратов чисел от `1` до `10`.
q = [1, 2, 3, 4, 5, 6, 7 , 8, 9, 10]
s = [q[0] ** 2, q[1] ** 2, q[2] ** 2, q[3] ** 2, q[4] ** 2, q[5] ** 2, q[6] ** 2, q[7] ** 2, q[8] ** 2, q[9] ** 2]
print(s)

# 44. Дан список чисел. Замените все отрицательные числа на `0`.
ns = [-5, 3, 1, 45, -21]
ns[0] = 0
ns[4] = 0
print(ns)

# 45. Посчитайте количество вхождений элемента `5` в списке `[1, 5, 3, 5, 5, 2]`.
vx = [1, 5, 3, 5, 5, 2]
print(vx.count(5))

#
# ### Словари ###
#
# # Легкие:
# 46. Создайте словарь `{"имя": "Анна", "возраст": 25}` и выведите имя.
dic = {"имя": "Анна", "возраст": 25}
print(dic["имя"])

# 47. Добавьте в словарь ключ `"город"` со значением `"Москва"`
dic["город"] = "Москва"
print(dic)

# 48. Удалите ключ `"возраст"` из словаря.
dic.pop("возраст")
print(dic)


# 49. Проверьте, есть ли ключ `"зарплата"` в словаре.
if "зарплата" in dic:
    print(True)
else:
    print(False)
# 50. Выведите все ключи словаря `{"a": 1, "b": 2, "c": 3}`.
le = {"a": 1, "b": 2, "c": 3}
print(le.keys())

#
# # Средние:
# 51. Объедините два словаря `{"a": 1}` и `{"b": 2}`.
a = {"a": 1}
b = {"b": 2}
a.update({"b": 2})
print(a)

# 52. Инвертируйте словарь (`{1: "a", 2: "b"}` → `{"a": 1, "b": 2}`).
# aa = {1: "a", 2: "b"}
# print()


# 53. Посчитайте сумму всех значений в словаре `{"яблоко": 50, "банан": 30}`.
fr = {"яблоко": 50, "банан": 30}
print(sum(fr.values()))


# 54. Отсортируйте словарь по ключам.
print(sorted(fr.items()))

# 55. Создайте словарь из списков `["a", "b"]` и `[1, 2]` (ключи — первый список).
s = ["a", "b"]
ss = [1, 2]
dicts = {s[0]:ss[0], s[1]:ss[1]}
print(dicts)

#
# # Сложные:
# 56. Найдите ключ с максимальным значением в словаре.
d = {
    "a" : 45,
    "b" : 54,
    "c" : 67
}
print(max(d, key=d.get))

# 57. Удалите все элементы с пустыми значениями из словаря.
e = {
    "empty" : " ",
    "mpty" : None,
    "mt" : "oops"
}
e.pop("empty")
e.pop("mpty")
print(e)

# 58. Сгенерируйте словарь, где ключи — числа от `1` до `5`, а значения — их квадраты.
qw = {
    1: 1 ** 2,
    2: 2 ** 2,
    3: 3 ** 2,
    4: 4 ** 2,
    5: 5 ** 2}
print(qw)

# 59. Дан список слов. Создайте словарь `{слово: длина_слова}`.
lens = {
    "birds" : len("birds"),
    "of" : len("of"),
    "a" : len("a"),
    "feather" : len("feather")
}
print(lens)

# 60. Сравните два словаря на идентичность.

print(qw == lens)

#
# ### Кортежи и множества ###
#
# # Легкие:
# 61. Создайте кортеж `(1, 2, 3)` и выведите его длину.
k = (1, 2, 3)
print(len(k))

# 62. Преобразуйте список `[4, 5, 6]` в кортеж.
sp = [4, 5, 6]
print(tuple(sp))

# 63. Создайте множество `{1, 2, 3}` и добавьте `4`.
ca = {1, 2, 3}
ca.add(4)
print(ca)

# 64. Проверьте, есть ли `5` в множестве `{2, 3, 4}`.
bn = {2, 3, 4}
print(5 in bn)


# 65. Найдите общие элементы множеств `{1, 2, 3}` и `{3, 4, 5}`.
one = {1, 2, 3}
two = {3, 4, 5}
print(one.intersection(two))

#
# # Средние:
# 66. Объедините два множества `{1, 2}` и `{2, 3}`.
o = {1, 2}
p = {2, 3}
print(o.union(p))

# 67. Удалите элемент `3` из множества `{1, 2, 3, 4}`.
r = {1, 2, 3, 4}
r.remove(3)
print(r)

# 68. Проверьте, является ли множество `{1, 2}` подмножеством `{1, 2, 3}`.
v = {1, 2}
vv = {1, 2, 3}
print(v < vv)

# 69. Создайте неизменяемое множество (frozenset).
fs = frozenset([3, 2, 5, 6])
print(fs)

# 70. Посчитайте количество уникальных слов в списке `["яблоко", "банан", "яблоко"]`.
fru = ["яблоко", "банан", "яблоко"]
print(len(set(fru)))

#
# # Сложные:
# 71. Удалите дубликаты из списка, используя множества.
print(set(fru))

# 72. Найдите элементы, которые есть только в одном из двух множеств.
print(vv.difference(v))

# 73. Сгенерируйте все возможные подмножества множества `{1, 2}`.
# g = {1, 2}
# print()
# не поняла как сделать

# 74. Проверьте, являются ли два множества непересекающимися.
ad = {12, 24, 45}
ab = {3, 54, 23}
print(True if ad.intersection(ab) else False)

# 75. Дан кортеж чисел. Найдите минимальный и максимальный элементы.
am = (3, 54, 23)
print(max(am))
print(min(am))

# ### Комбинированные задачи (сложные) ###
#
# 76. Создайте список словарей (каждый словарь — информация о человеке).
users = [
    { "name" : "Maria", "age" : 25, "city" : "Bishkek"},
    { "name" : "Mike", "age" : 26, "city" : "Bogota"},
    { "name" : "Melanie", "age" : 27, "city" : "Brussels"}
]
print(users)

# 77. Отсортируйте список словарей по ключу `"возраст"`.
#не смогла решить

# 78. Из списка чисел создайте словарь `{число: его_квадрат}`.
no = [2, 5, 6, 11]
nod = {no[0] : no[0] ** 2, no[1] : no[1] ** 2, no[2] : no[2] ** 2, no[3] : no[3] ** 2 }
print(nod)

# 79. Объедините два списка в словарь (`keys = ["a", "b"]`, `values = [1, 2]`).
keys = ["a", "b"]
values = [1, 2]
kvd = {keys[0] : values[0], keys[1] : values[1]}
print(kvd)

# 80. Найдите самое часто встречающееся слово в тексте (строка → список слов → счетчик).
te = "apple banana pinapple juice pinapple mango pinapple"
tes = te.split()
print(tes)
print(max(tes, key=tes.count))

# 81. Создайте вложенный словарь (например, данные о студентах с предметами и оценками).
studs = {
    "Mike" : {" Chemistry" : 5, "Geography" : 5, "English" : 5},
    "Gregory" : {" Chemistry" : 4, "Geography" : 5, "English" : 5},
    "Henry" : {" Chemistry" : 5, "Geography" : 4, "English" : 4}
}
print(studs)

# 82. Преобразуйте список кортежей `[("a", 1), ("b", 2)]` в словарь.
sk = [("a", 1), ("b", 2)]
sd = {sk[0][0] : sk [0][1], sk[1][0] : sk[1][1]} #1
sdd = dict(sk) #2
print(sd)
print(sdd)

# 83. Отфильтруйте словарь, оставив только элементы со значениями больше `10`.
dd = {"a" : 34, "b" : 4, "c" : 11, "d" : 1}
dd.pop("b")
dd.pop("d")
print(dd)

# 84. Сгенерируйте словарь, где ключи — буквы алфавита, а значения — их ASCII-коды.

# 85. Напишите функцию, которая объединяет два списка в словарь (проверяя длину).
ss = [2, 3, 4]
s = ["b", "d", "e"]
if len(ss) == len(s):
    print({ss[0]: s[0], ss[1]: s[1], ss[2]: s[2]})
else:
    print(False)

# 86. Дан список чисел. Создайте словарь `{число: количество_вхождений}`.
ch = [23, 45, 23, 1, 23]
chd = {ch[0] : ch.count(ch[0]), ch[1] : ch.count(ch[1]), ch[3] : ch.count(ch[3]) }
print(chd)

# 87. Найдите пересечение ключей двух словарей.
s1 = {1 : "a", 2 : "b"}
s2 = {2 : "a", 3 : "c"}
print((set(s1.keys()).intersection(s2.keys())))

# 88. Отсортируйте словарь по значениям в порядке убывания.
sa = {
    "a" : 1,
    "b" : 2,
    }
print(dict(sorted(sa.items(), reverse = True)))

# 89. Создайте словарь из строки, где ключи — символы, а значения — их количество в строке.
st = "Sky full of stars"
sts = st.split()
std = {
    sts[0]: len(sts[0]),
    sts[1]: len(sts[1]),
    sts[2]: len(sts[2]),
    sts[3]: len(sts[3])
}
print(std)

# 90. Реализуйте поиск по значению в словаре (выведите ключ по заданному значению).

# sfi = int(input("Введите значение: "))
# sf = {
#     "a" : 4,
#     "b" : 5,
#     "c" : 7
# }
#
# print("a" if sfi == 4 else "b" if sfi == 5 else "c" if sfi == 7 else False)

# 91. Создайте кортеж из списка, удалив повторяющиеся элементы.
spi = [1, 2, 2, 1, 2, 3, 4, 4, 4, 2]
print(tuple(set(spi)))

# 92. Объедините несколько словарей в один (используйте `update` или `**`).
g = {
    1 : "odin",
    2 : "dva",
}

gg = {
    3 : "tri",
    4 : "chetyre"
}

ggg = {
    5 : "pyat",
    6 : "shest"
}

g.update(gg)
g.update(ggg)
print(g)

# 93. Проверьте, все ли значения в словаре уникальны.

n = {"a": 5, "b": 6, "c": 8, "d": 7, "e": 5}
print(len(set(n.values())) == len(n.values()))

# 94. Разделите словарь на два: в одном ключи с четными значениями, в другом — с нечетными.

# 95. Преобразуйте словарь в список кортежей `(ключ, значение)`.
spk = (tuple[(n.items())])
print(spk)

# 96. Напишите функцию, которая инвертирует вложенный словарь (меняет местами ключи и значения).

# 97. Создайте множество из списка, но с условием (например, только четные числа).

# 98. Найдите симметричную разность трех множеств.
on = {1, 2, 3}
tw = {3, 4, 5}
th = {5, 6 ,7}
ths = on.symmetric_difference(tw).symmetric_difference(th)
print(ths)

# 99. Реализуйте проверку на анаграмму (используйте множества и словари).
an = "mean"
na = "name"
print(set(an) == set(na))

# 100. Создайте генератор словарей для хранения таблицы умножения (ключи — пары чисел).
